#!/usr/bin/env perl

use strict;
use warnings;

use 5.22.0;

use List::Util 'max', 'min', 'sum';

use autodie;

use Net::Twitter;
use DateTime;
use DateTime::Format::Strptime;

my $nt = Net::Twitter->new(
    traits => [qw/API::RESTv1_1/],
    ssl => 1,
);

use Data::Dumper::Concise;
my $user = shift;

my @in = (
    screen_name => $user,
    trim_user => 1,
    exclude_replies => 1,
    count => 200,
);
my @statuses = sort { $a->{id} cmp $b->{id} } @{$nt->user_timeline({@in})};
_save($user, \@statuses);

# 1000 or 2 weeks
my $oldest = DateTime->now->subtract( days => 14 )->ymd('-');
while (@statuses < 1000 && $oldest lt _p($statuses[-1])->ymd('-')) {
    my @new_statuses =
        @{$nt->user_timeline({
            @in,
            max_id => $statuses[0]->{id},
        })};
    @statuses = (@new_statuses, @statuses);
    my %statuses = map { $_->{id} => $_ } @statuses;
    @statuses =
        sort { $a->{id} cmp $b->{id} }
        values %statuses;
    _save($user, \@statuses);
}

my %days;
for my $s (@statuses) {
    my $x = _p($s)->ymd('-');
    $days{$x} ||= 1;
    $days{$x}++;
}

my $f = DateTime::Format::Strptime->new(
    pattern => '%F',
);


my $day_count = do {
    my $min = $f->parse_datetime(_p($statuses[0]))->epoch;
    my $max = $f->parse_datetime(_p($statuses[-1]))->epoch;
    int(( $max - $min ) / (60 * 60 * 24))
};
say "min: " . min(values %days);
say "max: " . max(values %days);
printf "avg: %0.02f\n", scalar(@statuses) / $day_count;

sub _p {
    DateTime::Format::Strptime->new(
        pattern => '%a %b %d %T %z %Y',
    )->parse_datetime($_[0]->{created_at})
}

sub _save {
    my ($user, $data) = @_;
    my $name = "$user-statuses";
    open my $fh, '>', "$name.tmp";
    print $fh Dumper($data);
    rename "$name.tmp", $name;
}

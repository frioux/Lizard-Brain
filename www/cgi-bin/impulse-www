#!/usr/bin/env plackup

use strict;
use warnings;

package LizardBrain::WWW;
use Web::Simple;
use IO::Socket::IP;
use Plack::Middleware::Auth::Basic;
use Authen::Passphrase;
use Digest::SHA qw(hmac_sha1_hex);
use Plack::Request;

die 'Set LB_PASS to a password hash'
  unless defined $ENV{LB_PASS};

my $pw = Authen::Passphrase->from_crypt($ENV{LB_PASS});

sub twilio {
  my ($self, $from, $body) = @_;

  '' => sub {
    Plack::Middleware::Auth::Basic->new(
      authenticator => sub {
        my ($username, $password, $env) = @_;

        $pw->match("u$username:p$password");
      },
    ),
  },
  '' => sub {
    return [ 405, [ 'Content-type', 'text/plain' ], [ 'Not authorized yo' ] ]
      unless $from eq $ENV{MY_CELL};

    my $sock = IO::Socket::IP->new(
       PeerHost => '127.0.0.1',
       PeerPort => 8000,
       Type     => SOCK_STREAM,
     ) or return [
       500,
       [ 'Content-type', 'text/plain' ],
       [ "Cannot construct socket - $@" ]
     ];

    # TODO: bubble up non-zero exits somehow
     print $sock "$body";

     shutdown $sock, 1;

     local $/;
     [ 200, [ 'Content-type', 'text/plain' ], [ <$sock> ] ]
  },
}

my $secret = $ENV{LB_GH_SECRET};

sub github {
  my ($self, $env) = @_;

  my $req = Plack::Request->new($env);
  my $x_hub_signature = $req->header('X-Hub-Signature');
  my $calculated_signature = 'sha1='.  hmac_sha1_hex($req->content, $secret);

  return [
    405,
    [ 'Content-type' => 'text/plain' ],
    [ 'invalid mac yo' ],
  ] unless $x_hub_signature eq $calculated_signature;

  system qw(git fetch);
  system qw(git reset --hard @{upstream});
  system '../../bin/maint/db-deploy';

  return [
    200,
    [ 'Content-type' => 'text/plain' ],
    [ 'Updated!' ],
  ]
}

$|++;
sub dispatch_request {
  'GET + /twilio + ?From=&Body=' => 'twilio',
  '/github' => 'github',
  '/ok' => sub {
    [ 200, [ 'Content-Type', 'text/plain' ], [ 'All is well' ] ],
  },
  '' => sub {
    [ 405, [ 'Content-type', 'text/plain' ], [ 'Method not allowed' ] ]
  }
}
LizardBrain::WWW->run_if_script;

# vim: ft=perl
